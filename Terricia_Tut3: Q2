#Terricia Govender
#212505648
#Tut 3: Question 2
#Adapted from lecture notes/examples, nbody_animate.py 

import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.animation as animation

from matplotlib import pyplot as plt

class nBodySol:
      def __init__(self,x=0,y=0,m=1):
          self.x=x
          self.y=y
          self.m=m
          self.conf={"particles":3,"G":1,"e":0.03}

      def pot_E(self):
          pot=0
          for n in range(self.conf["particles"]):
              x=self.x[n]-self.x
              y=self.y[n]-self.y
              r_2=x**2+y**2
              soft=self.conf["e"]**2
              r_2[r_2<soft]=soft
              r_2=r_2+self.conf["e"]**2
              r=np.sqrt(r_2)
              pot=pot+self.conf["G"]*np.sum(self.m/r)*self.m[n]
          return -0.5*pot

      def start(self):
          self.x=np.random.randn(self.conf["particles"])
          self.y=np.random.randn(self.conf["particles"])
          self.m=np.ones(self.conf["particles"])*self.m/self.conf["particles"]
          self.vx=np.zeros(self.conf["particles"])
          self.vy=np.zeros(self.conf["particles"])
          self.fx=np.zeros(self.conf["particles"])
          self.fy=np.zeros(self.conf["particles"])

      def determine_Force(self):
          for n in range(self.conf["particles"]):
              x=self.x[n]-self.x
              y=self.y[n]-self.y
              r_2=x**2+y**2
              soft=self.conf["e"]**2
              r_2[r_2<soft]=soft
              r_2=r_2+self.conf["e"]**2
              r=np.sqrt(r_2)
              r_3=(r*r_2)
              self.fx[n]=-self.conf["G"]*np.sum((self.m*x)/r_3)*self.m[n]
              self.fy[n]=-self.conf["G"]*np.sum((self.m*y)/r_3)*self.m[n]

      def update_Particles(self,timestep):
          self.x=self.x+self.vx*timestep
          self.y=self.y+self.vy*timestep
          pot=self.pot_E()
          self.calculateForce()
          self.vx=self.vx+self.fx*timestep
          self.vy=self.vy+self.fy*timestep
          KE=0.5*np.sum(self.m*(self.vx**2+self.vy**2))
          return pot+KE

system=nBodySol()
system.initialize()
timestep=0.01
oversamp=5
fig = plt.figure()
a = fig.add_subplot(111, autoscale_on=False, xlim=(-8, 8), ylim=(-8, 8))
line, = ax.plot([], [], '*', lw=2)

energy=np.array([])
print(type(energy))
def animate_points(crud):
    global system,line
    for ii in range(oversamp):
        value=np.array(system.update_Particles(timestep))
    np.append(energy,value)
    print(value)
    line.set_data(system.x,system.y)

ani = animation.FuncAnimation(fig, animate_points, np.arange(30),interval=25, blit=False)
plt.show()

time=np.range(timestep*energy.shape[0],timestep)
plt.plot(time,energy)
plt.set_xlabel("Time(s)")
plt.set_ylabel("Energy")
plt.show()

   
